#!/usr/bin/env python

PACKAGE = "vsemi_tof_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

op_mod_enum     = gen.enum([ gen.const("Wide_Field_image", int_t, 0, "Wide Field image"),
                             gen.const("Narrow_Field_manual", int_t, 1, "Narrow Field manual")
                             ], "An enum to set operating mode")

image_type_enum = gen.enum([ gen.const("Distance_only",  int_t, 0, "Distance Only"),
                             gen.const("Distance_and_Grayscale", int_t, 1, "Distance and Grayscale"),
                             gen.const("Distance_and_Amplitude", int_t, 2, "Distance and Amplitude")
                             ], "An enum to set image type")

hdr_enum        = gen.enum([ gen.const("HDR_off", int_t, 0, "HDR off"),
                            gen.const("HDR_spatial", int_t, 1, "HDR spatial"),
                             gen.const("HDR_temporal", int_t, 2, "HDR temporal")
                           ], "An enum to set HDR modes")

color_enum        = gen.enum([ gen.const("Distance", int_t, 0, "Distance"),
                            gen.const("Grayscale", int_t, 1, "Grayscale")
                           ], "An enum to set Point Cloud Color")

orientation_enum  = gen.enum([ gen.const("Lanscape", int_t, 0, "Lanscape"),
                            gen.const("Portrait", int_t, 1, "Portrait")
                           ], "An enum to set Lanscape or Portrait")

######  Name                          Type   Reconfiguration level  Description     Default Min  Max
gen.add("mode",                       int_t,       0,  "Operating mode", 0, 0, 3, edit_method = op_mod_enum)

gen.add("angle_x",                    double_t,    0,  "Horizontal Angle of FOV [degrees]",  55.0,  0, 160.0 )
gen.add("angle_y",                    double_t,    0,  "Vertical Angle of FOV [degrees]",    20.625, 0, 90.0)

gen.add("image_type",            int_t,     0,  "Image type",  0, 0, 2, edit_method = image_type_enum)

gen.add("hdr",                        int_t,       0,  "HDR mode", 0, 0, 2, edit_method = hdr_enum)

gen.add("automatic_integration_time", bool_t,      0,  "Automatic integration time",  False)

gen.add("integration_time_0",         int_t,       0,  "Integration time TOF for beam A [uS]",      1000, 0, 3000)
gen.add("integration_time_1",         int_t,       0,  "Integration time TOF for beam A [uS]",       200, 0, 1000)
gen.add("integration_time_2",         int_t,       0,  "Integration time TOF for beam A [uS]",         0, 0, 1000)
gen.add("integration_time_3",         int_t,       0,  "Integration time TOF for beam A [uS]",         0, 0, 1000)
gen.add("integration_time_4",         int_t,       0,  "Integration time TOF for beam B [uS]",         0, 0, 1000)
gen.add("integration_time_5",         int_t,       0,  "Integration time TOF for beam B [uS]",         0, 0, 1000)

gen.add("integration_time_gray",      int_t,       0,  "Integration time Grayscale [uS]",           6000, 0, 50000)

gen.add("min_amplitude_0",            int_t,       0,  "threshold minAmplitude 0 beam A LSB",         60, 0, 2047)
gen.add("min_amplitude_1",            int_t,       0,  "threshold minAmplitude 1 beam A LSB",         40, 0, 2047)
gen.add("min_amplitude_2",            int_t,       0,  "threshold minAmplitude 2 beam A LSB",          0, 0, 2047)
gen.add("min_amplitude_3",            int_t,       0,  "threshold minAmplitude 3 beam A LSB",          0, 0, 2047)
gen.add("min_amplitude_4",            int_t,       0,  "threshold minAmplitude 4 beam B LSB",          0, 0, 2047)
gen.add("min_amplitude_5",            int_t,       0,  "threshold minAmplitude 5 beam B LSB",          0, 0, 2047)

gen.add("dcs_filter",                 bool_t,      0,  "DCS filter",  False)

gen.add("roi_left_x",                 int_t,       0,  "ROI left X",     0, 0,  153)
gen.add("roi_top_y",                  int_t,       0,  "ROI top Y",      0, 0,   57)
gen.add("roi_right_x",                int_t,       0,  "ROI right X",  159, 5,  159)
gen.add("roi_bottom_y",               int_t,       0,  "ROI bottom Y",  59, 1,   59)

gen.add("orientation",                int_t,       0,  "Orientation",       0, 0, 1, edit_method = orientation_enum)

gen.add("point_cloud_color",          int_t,       0,  "Point Cloud Color", 0, 0, 1, edit_method = color_enum)

gen.add("range",                      int_t,       0,  "Range",  7500, 1000,   9000)

exit(gen.generate(PACKAGE, "tof_cam_node", "vsemi_tof_ros"))
